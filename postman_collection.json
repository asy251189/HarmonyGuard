{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Multilingual Abuse Detection API",
		"description": "Complete API collection for testing multilingual abusive language detection across English and Indian languages",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Health & Status",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check API health status and uptime"
					},
					"response": []
				},
				{
					"name": "Get Supported Languages",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/languages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"languages"
							]
						},
						"description": "Get list of all supported languages with their codes and names"
					},
					"response": []
				}
			],
			"description": "Health checks and system information endpoints"
		},
		{
			"name": "Single Text Detection",
			"item": [
				{
					"name": "Clean English Text",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Hello, how are you doing today? Hope you have a wonderful day!\",\n    \"threshold\": 0.5,\n    \"include_highlights\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test with clean, positive English text - should return 'allow'"
					},
					"response": []
				},
				{
					"name": "English Profanity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"You are such an idiot and stupid person\",\n    \"threshold\": 0.5,\n    \"include_highlights\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test with English profanity - should return 'flag' or 'block'"
					},
					"response": []
				},
				{
					"name": "Hindi Clean Text",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"आप कैसे हैं? आज का दिन कैसा है? आपका स्वागत है।\",\n    \"threshold\": 0.5,\n    \"include_highlights\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test with clean Hindi text in Devanagari script"
					},
					"response": []
				},
				{
					"name": "Hindi Abusive Text",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"तुम बहुत बेवकूफ हो और मूर्ख भी\",\n    \"threshold\": 0.5,\n    \"include_highlights\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test with Hindi abusive language"
					},
					"response": []
				},
				{
					"name": "Mixed Language (Hinglish)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Hello यार, you are बेवकूफ and stupid\",\n    \"threshold\": 0.5,\n    \"include_highlights\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test with mixed English-Hindi (Hinglish) text containing abuse"
					},
					"response": []
				},
				{
					"name": "Context Aware - Negation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"I am not stupid or an idiot, I'm actually quite smart\",\n    \"threshold\": 0.5,\n    \"include_highlights\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test context awareness with negated abusive terms"
					},
					"response": []
				},
				{
					"name": "Custom Threshold Test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"This is mildly annoying\",\n    \"threshold\": 0.3,\n    \"include_highlights\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test with custom lower threshold"
					},
					"response": []
				}
			],
			"description": "Single text detection with various test cases"
		},
		{
			"name": "Batch Detection",
			"item": [
				{
					"name": "Batch Process Multiple Texts",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"text\": \"Hello world, nice to meet you!\",\n        \"threshold\": 0.5\n    },\n    {\n        \"text\": \"You are stupid and annoying\",\n        \"threshold\": 0.5\n    },\n    {\n        \"text\": \"आप कैसे हैं?\",\n        \"threshold\": 0.5\n    },\n    {\n        \"text\": \"तुम बेवकूफ हो\",\n        \"threshold\": 0.5\n    },\n    {\n        \"text\": \"Hello यार, how are you?\",\n        \"threshold\": 0.5\n    }\n]"
						},
						"url": {
							"raw": "{{base_url}}/batch-detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"batch-detect"
							]
						},
						"description": "Process multiple texts in a single batch request"
					},
					"response": []
				}
			],
			"description": "Batch processing endpoints for multiple texts"
		},
		{
			"name": "Advanced Features",
			"item": [
				{
					"name": "With Language Hints",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"तुम बहुत अच्छे हो\",\n    \"languages\": [\"hi\"],\n    \"threshold\": 0.5,\n    \"include_highlights\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Provide language hints to improve detection accuracy"
					},
					"response": []
				},
				{
					"name": "Without Highlights",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"You are stupid\",\n    \"threshold\": 0.5,\n    \"include_highlights\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Get detection results without span highlights for faster processing"
					},
					"response": []
				},
				{
					"name": "With Context Information",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"This movie is stupid\",\n    \"threshold\": 0.5,\n    \"include_highlights\": true,\n    \"context\": {\n        \"source\": \"movie_review\",\n        \"user_id\": \"user123\",\n        \"platform\": \"social_media\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Provide additional context for better detection"
					},
					"response": []
				}
			],
			"description": "Advanced features and configuration options"
		},
		{
			"name": "Error Cases",
			"item": [
				{
					"name": "Empty Text",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"\",\n    \"threshold\": 0.5\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test error handling with empty text"
					},
					"response": []
				},
				{
					"name": "Invalid Threshold",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Hello world\",\n    \"threshold\": 1.5\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test error handling with invalid threshold value"
					},
					"response": []
				},
				{
					"name": "Large Text Input",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"This is a very long text that might exceed the maximum length limit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"threshold\": 0.5\n}"
						},
						"url": {
							"raw": "{{base_url}}/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detect"
							]
						},
						"description": "Test with very long text input"
					},
					"response": []
				}
			],
			"description": "Error handling and edge cases"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set timestamp for requests",
					"pm.globals.set('timestamp', new Date().toISOString());",
					"",
					"// Log request details",
					"console.log('Making request to:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Basic response validation",
					"pm.test('Status code is successful', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
					"});",
					"",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"pm.test('Content-Type is application/json', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Test for detection endpoints",
					"if (pm.request.url.path.includes('detect')) {",
					"    pm.test('Response has required fields', function () {",
					"        const jsonData = pm.response.json();",
					"        if (Array.isArray(jsonData)) {",
					"            // Batch response",
					"            jsonData.forEach(item => {",
					"                pm.expect(item).to.have.property('severity_score');",
					"                pm.expect(item).to.have.property('decision');",
					"                pm.expect(item).to.have.property('detected_languages');",
					"            });",
					"        } else {",
					"            // Single response",
					"            pm.expect(jsonData).to.have.property('severity_score');",
					"            pm.expect(jsonData).to.have.property('decision');",
					"            pm.expect(jsonData).to.have.property('detected_languages');",
					"            pm.expect(jsonData).to.have.property('labels');",
					"            pm.expect(jsonData).to.have.property('confidence');",
					"        }",
					"    });",
					"",
					"    pm.test('Severity score is valid', function () {",
					"        const jsonData = pm.response.json();",
					"        if (Array.isArray(jsonData)) {",
					"            jsonData.forEach(item => {",
					"                pm.expect(item.severity_score).to.be.at.least(0);",
					"                pm.expect(item.severity_score).to.be.at.most(1);",
					"            });",
					"        } else {",
					"            pm.expect(jsonData.severity_score).to.be.at.least(0);",
					"            pm.expect(jsonData.severity_score).to.be.at.most(1);",
					"        }",
					"    });",
					"",
					"    pm.test('Decision is valid', function () {",
					"        const jsonData = pm.response.json();",
					"        const validDecisions = ['allow', 'flag', 'block'];",
					"        if (Array.isArray(jsonData)) {",
					"            jsonData.forEach(item => {",
					"                pm.expect(validDecisions).to.include(item.decision);",
					"            });",
					"        } else {",
					"            pm.expect(validDecisions).to.include(jsonData.decision);",
					"        }",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "api_version",
			"value": "1.0.0",
			"type": "string"
		}
	]
}